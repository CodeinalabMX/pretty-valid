{"version":3,"sources":["src/js/pretty-valid_draft.js"],"names":["$","jQuery","fn","prettyValid","custom_settings","this_plugin","this","settings","extend","default_setting","length","each","customOptions","public_function","param","console","log"],"mappings":"+yCAqBAA,sCAAAA,EAuDAC,QAlDAC,GAAAC,YAAA,SAAAC,GAMA,IAAAC,EAAAC,KAMAC,EAAAP,EAAAQ,OAAA,CAEAC,gBAAA,6BACAL,GAMA,OAAAC,EAAAK,OAAA,GACAL,EAAAM,KAAA,WACAX,EAAAK,GAAAF,YAAAS,iBAEAP,IAeAA,EAAAQ,gBAAA,SAAAC,GAEAC,QAAAC,IAAA,uCAAAF,IATAC,QAAAC,IAAA,mDAAAT,EAAAE,iBACAJ","sourcesContent":["/*! Pretty Valid v0.1.0 http://codeinalabmx.github.io/pretty-valid License: MIT */\n\n/*\n * Pretty Valid v0.1.0\n *\n * Custom HTML5 form validation dialogues\n * http://codeinalabmx.github.io/pretty-valid\n * Licence: MIT\n * Author: hEy @ codeinalab.com\n * \n * Reference:\n *\n * https://learn.jquery.com/plugins/basic-plugin-creation/\n * https://jqueryboilerplate.com/\n * http://scriptble.com/2011/02/14/expanding-the-jquery-plugin-development-pattern/\n * \n */\n\n// the semi-colon before the function invocation is a safety\n// net against concatenated scripts and/or other plugins\n// that are not closed properly.\n;(function($)\n{\n\n  //* Plugin's name\n  /* Set the plugin's name into the jQuery.fn namespace */\n  $.fn.prettyValid = function(custom_settings) {\n\n    //* Plugin' settings\n    /* Define private properties within the plugin' scope.\n     * To avoid scope issues, assign'this' to 'this_plugin'\n     * to reference this class from internal events and functions. */\n    var this_plugin = this;\n    var private_var = 'private var';\n    /* Use the default jQuery.extend utility to merge\n     * default with with the ones set per instance.\n     * This is the easiest way to have default options.\n     */\n    var settings = $.extend({\n      //* Plugin's default settings\n      default_setting: 'this is a default setting'\n    }, custom_settings);\n\n    /* In order to create multiple instances\n     * of the plugin attached to different DOM elements\n     * loop through each of the elements \n     * return 'this_plugin' to allow chaining methods. */\n    if (this_plugin.length > 1){\n      this_plugin.each(function() {\n        $(this_plugin).prettyValid(customOptions)\n      });\n      return this_plugin;\n    }\n\n    //* Plugin's logic\n    \n    //* Plugin's private functions\n    /* Functions defined this way are accessible only within the plugin' scope */\n    var init = function() {\n      console.log('Plugin\\'s initialization with a default setting: ' + settings.default_setting);\n      return this_plugin;\n    };\n\n    //* Plugin's public functions\n    /* Expose functions by attaching them to 'this', or in this case 'plugin'\n     * as we defined above */\n    this_plugin.public_function = function(param) {\n      //* Do something\n      console.log('this is a public funtion with param:' + param);\n    };\n\n    //* Plugin's initialization\n    return init();\n\n  }\n\n})(jQuery);\n"]}