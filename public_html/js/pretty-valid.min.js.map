{"version":3,"sources":["src/js/pretty-valid_draft.js"],"names":["$","jQuery","fn","prettyValid","custom_settings","items","invalid_items","this_plugin","this","extend","default_setting","length","each","customOptions","validate","find","invalid_tems","item_validation","current_item","addClass","public_function","param","console","log","attr","on","e","preventDefault","stopPropagation"],"mappings":"+yCAqBAA,sCAAAA,EA+FAC,QA1FAC,GAAAC,YAAA,SAAAC,GAMA,IAEAC,EAAAC,EAFAC,EAAAC,KAiBA,GAVAR,EAAAS,OAAA,CAGAC,gBAAA,6BACAN,GAMAG,EAAAI,OAAA,EAIA,OAHAJ,EAAAK,KAAA,WACAZ,EAAAO,GAAAJ,YAAAU,iBAEAN,EAOA,IAYAO,EAAA,YAIAT,EAAAE,EAAAQ,KAAA,4CAGAC,aAAA,GACAX,EAAAO,KAAA,YAEAK,EAAAjB,EAAAQ,QAAAF,OAIAA,EAAAK,QASAM,EAAA,SAAAC,GAIAA,EAAAC,SAAA,eAaA,OAPAZ,EAAAa,gBAAA,SAAAC,GAGAC,QAAAC,IAAA,uCAAAF,IA7CAd,EAAAiB,KAAA,aAAA,cAAAC,GAAA,SAAA,SAAAC,GACAA,EAAAC,iBACAD,EAAAE,kBACAd,MAGAP","sourcesContent":["/*! Pretty Valid v0.1.0 http://codeinalabmx.github.io/pretty-valid License: MIT */\r\n\r\n/*\r\n * Pretty Valid v0.1.0\r\n *\r\n * Custom HTML5 form validation dialogues\r\n * http://codeinalabmx.github.io/pretty-valid\r\n * Licence: MIT\r\n * Author: hEy @ codeinalab.com\r\n * \r\n * Reference:\r\n *\r\n * https://learn.jquery.com/plugins/basic-plugin-creation/\r\n * https://jqueryboilerplate.com/\r\n * http://scriptble.com/2011/02/14/expanding-the-jquery-plugin-development-pattern/\r\n * \r\n */\r\n\r\n// the semi-colon before the function invocation is a safety\r\n// net against concatenated scripts and/or other plugins\r\n// that are not closed properly.\r\n;(function($)\r\n{\r\n\r\n  //* Plugin's name\r\n  /* Set the plugin's name into the jQuery.fn namespace */\r\n  $.fn.prettyValid = function(custom_settings) {\r\n\r\n    //* Plugin' settings\r\n    /* Define private properties within the plugin' scope.\r\n     * To avoid scope issues, assign 'this' to 'this_plugin'\r\n     * to reference this class from internal events and functions. */\r\n    var this_plugin = this; //this is also the element attached to */\r\n    var private_var = 'private var';\r\n    var items, invalid_items, current_item;\r\n    /* Use the default jQuery.extend utility to merge\r\n     * default with with the ones set per instance.\r\n     * This is the easiest way to have default options.\r\n     */\r\n    var settings = $.extend({\r\n      //* Plugin's default settings\r\n      \r\n      default_setting: 'this is a default setting'\r\n    }, custom_settings);\r\n\r\n    /* In order to create multiple instances\r\n     * of the plugin attached to different DOM elements\r\n     * loop through each of the elements \r\n     * return 'this_plugin' to allow chaining methods. */\r\n    if (this_plugin.length > 1){\r\n      this_plugin.each(function() {\r\n        $(this_plugin).prettyValid(customOptions)\r\n      });\r\n      return this_plugin;\r\n    }\r\n\r\n    //* Plugin's logic\r\n    \r\n    //* Plugin's private functions\r\n    /* Functions defined this way are accessible only within the plugin' scope */\r\n    var init = function()\r\n    {\r\n      /* Attach event handler, replacing default browser validation behavior on submit */\r\n      this_plugin.attr('novalidate', 'novalidate').on('submit', function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation()\r\n        validate();\r\n      });\r\n\r\n      return this_plugin;\r\n    };\r\n\r\n    var validate = function()\r\n    {\r\n      /* Get all required elements and check for validity\r\n       *  */\r\n      items = this_plugin.find(':required, [data-required=\"required\"]');\r\n      \r\n      if (items) {\r\n        invalid_tems = '';//$([]);\r\n        items.each(function()\r\n        {\r\n          item_validation($(this)) ? '' : invalid_items++;\r\n\r\n        });\r\n      }            \r\n      if (invalid_items.length) {\r\n        //validationResult = false;\r\n        //plugin.notificationShow();\r\n      } else {\r\n        //(plugin.settings.ajax) ? plugin._formAjaxSubmit() : plugin._formSubmit();\r\n      }\r\n\r\n    }\r\n\r\n    var item_validation = function(current_item)\r\n    {\r\n      /* Do here single item validations */\r\n      //console.log(current_item[0].validity.valid);\r\n      current_item.addClass('test-class');\r\n    }\r\n\r\n    //* Plugin's public functions\r\n    /* Expose functions by attaching them to 'this', or in this case 'plugin'\r\n     * as we defined above */\r\n    this_plugin.public_function = function(param)\r\n    {\r\n      //* Do something\r\n      console.log('this is a public funtion with param:' + param);\r\n    };\r\n\r\n    //* Plugin's initialization\r\n    return init();\r\n\r\n  }\r\n\r\n})(jQuery);\r\n"]}