{"version":3,"sources":["src/js/pretty-valid_draft.js"],"names":["$","jQuery","fn","prettyValid","custom_settings","items","item","auto_hide","this_plugin","this","settings","extend","notification","wrapper","id","class","invalid_class","valid_class","show_effect","hide_effect","input_invalid_class","input_valid_class","valid_message","invalid_message","error_message","ajax","ajax_method","ajax_url","g_recaptcha","g_recaptcha_site_key","g_reCaptchaLanguage","length","each","customOptions","validate","find","grep","n","removeClass","validity","valid","notification_show","submit","submit_ajax","off","type","url","data","serializeArray","dataType","success","status","message","reset","error","i","addClass","attr","prependTo","html","is","fadeTo","on","e","notification_hide","setTimeout","clearTimeout","public_function","param","console","log","preventDefault","stopPropagation"],"mappings":"+yCAqBAA,sCAAAA,EA+LAC,QA1LAC,GAAAC,YAAA,SAAAC,GAMA,IACAC,EAAAC,EAAAC,EADAC,EAAAC,KAMAC,EAAAV,EAAAW,QAAA,EAAA,CAEAC,aAAA,CACAC,QAAA,CACAC,GAAA,eACAC,MAAA,gBAEAC,cAAA,UACAC,YAAA,UACAV,UAAA,IACAW,YAAA,YACAC,YAAA,WAEAC,oBAAA,aACAC,kBAAA,WACAC,cAAA,4CACAC,gBAAA,oEACAC,cAAA,oBAEAC,MAAA,EACAC,YAAA,OACAC,SAAA,WAKAC,aAAA,EACAC,qBAAA,2CACAC,oBAAA,UAEA1B,GAMA,GAAAI,EAAAuB,OAAA,EAIA,OAHAvB,EAAAwB,KAAA,WACAhC,EAAAQ,GAAAL,YAAA8B,iBAEAzB,EAOA,IAWA0B,EAAA,WAGA7B,EAAAG,EAAA2B,KAAA,cACA9B,EAAAL,EAAAoC,KAAA/B,EAAA,SAAAgC,GAIA,OAFArC,EAAAqC,GAAAC,YAAA5B,EAAAU,sBAEAiB,EAAAE,SAAAC,SAGA,OAAAC,EAAA/B,EAAAE,aAAAI,cACAN,EAAAa,iBAAAmB,KAGAA,EAAA,WAGAhC,EAAA,KAAAiC,IAAAnC,EAAAoC,IAAA,UAAAF,UAGAC,EAAA,WAGA3C,EAAAyB,KAAA,CACAoB,KAAAnC,EAAAgB,YACAoB,IAAApC,EAAAiB,SACAoB,KAAAvC,EAAAwC,iBACAC,SAAA,OACAC,QAAA,SAAAH,GAEAA,EAAAI,QACAC,QAAAL,EAAA,QAAAA,EAAAK,QAAA1C,EAAAY,cACAmB,EAAA/B,EAAAE,aAAAK,YACAmC,SACA5C,EAAA,GAAA6C,UAEAD,QAAAL,EAAA,QAAAA,EAAAK,QAAA1C,EAAAc,cACAiB,EAAA/B,EAAAE,aAAAI,cACAoC,WAGAE,MAAA,SAAAP,GAEAN,EAAA/B,EAAAE,aAAAI,cACAQ,mBAMAiB,EAAA,SAAAI,EAAAO,GAEApD,EAAAgC,KAAA3B,EAAA,SAAAkD,GAEAvD,EAAAS,MAAA+C,SAAA9C,EAAAU,wBAKAd,EADA,IAAAN,EAAA,IAAAU,EAAAE,aAAAC,QAAAC,IAAAiB,OACA/B,EAAA,UAAAyD,KAAA,KAAA/C,EAAAE,aAAAC,QAAAC,IACA2C,KAAA,QAAA/C,EAAAE,aAAAC,QAAAE,OACA2C,UAAA,QAEA1D,EAAA,IAAAU,EAAAE,aAAAC,QAAAC,KAEA0C,SAAAX,GACAc,KAAAP,GAEA9C,EAAAsD,GAAA,YACAtD,EAAAuD,OAAA,OAAA,IAAAA,OAAA,OAAA,IAEAvD,EAAAI,EAAAE,aAAAM,eACAZ,EAAAwD,GAAA,QAAA,SAAAC,GAEAC,MAGAtD,EAAAE,aAAAL,YACAA,EAAA0D,WAAA,WAEAD,KACAtD,EAAAE,aAAAL,cAOAyD,EAAA,WAEAhE,EAAA,IAAAU,EAAAE,aAAAC,QAAAC,IAAAJ,EAAAE,aAAAO,aAAA,QACA+C,aAAA3D,IAoBA,OAPAC,EAAA2D,gBAAA,SAAAC,GAGAC,QAAAC,IAAA,uCAAAF,IApHA5D,EAAAiD,KAAA,aAAA,cAAAK,GAAA,SAAA,SAAAC,GACAA,EAAAQ,iBACAR,EAAAS,kBACAtC,MAEA1B","sourcesContent":["/*! Pretty Valid v0.2.0 http://codeinalabmx.github.io/pretty-valid License: MIT */\n\n/*\n * Pretty Valid v0.2.0\n *\n * Custom HTML5 form validation dialogues\n * http://codeinalabmx.github.io/pretty-valid\n * Licence: MIT\n * Author: hEy @ codeinalab.com\n * \n * Reference:\n *\n * https://learn.jquery.com/plugins/basic-plugin-creation/\n * https://jqueryboilerplate.com/\n * http://scriptble.com/2011/02/14/expanding-the-jquery-plugin-development-pattern/\n * \n */\n\n// the semi-colon before the function invocation is a safety\n// net against concatenated scripts and/or other plugins\n// that are not closed properly.\n;(function($)\n{\n\n  //* Plugin's name\n  /* Set the plugin's name into the jQuery.fn namespace */\n  $.fn.prettyValid = function(custom_settings) {\n\n    //* Plugin' settings\n    /* Define private variables within the plugin' scope.\n     * To avoid scope issues, assign 'this' to 'this_plugin'\n     * to reference this class from internal events and functions. */\n    var this_plugin = this; /* This is also the element attached to */\n    var items, item, auto_hide;\n    /* Use the default jQuery.extend utility to merge\n     * default settings with with the ones set per instance.\n     * This is the easiest way to have default options.\n     */\n    var settings = $.extend(true, {\n      //* Plugin's default settings\n      notification: {\n        wrapper: {\n          id: 'notification',\n          class: 'notification',\n        },\n        invalid_class: 'warning',\n        valid_class: 'success',\n        auto_hide: 8000,\n        show_effect: 'slideDown', //* fadeIn/slideDown\n        hide_effect: 'slideUp', //* fadeOut/slideUp\n      },\n      input_invalid_class: 'is-invalid',\n      input_valid_class: 'is-valid',\n      valid_message: 'El mensaje ha sido enviado correctamente.',\n      invalid_message: 'Verifica que hayas completado correctamente los campos seÃ±alados.',\n      error_message: 'Ocurrio un error.',\n      /* Enable send form data via ajax */\n      ajax: true, //* Boolean\n      ajax_method: 'POST', //* POST/GET\n      ajax_url: 'ajax.php',\n      /* Enable google reCaptcha render\n       * Get the keys from the google reCaptcha admin console\n       * and the anguage code from https://developers.google.com/recaptcha/docs/language \n       * reCaptcha error message is handled by the backend script */\n      g_recaptcha: true, //* Boolean\n      g_recaptcha_site_key: '6LcSBqUUAAAAANOdeoW7nod-ICnH0ycTTWlSgNlw',\n      g_reCaptchaLanguage: 'es-419', //* \n\n    }, custom_settings);\n\n    /* In order to create multiple instances\n     * of the plugin attached to different DOM elements\n     * loop through each of the elements \n     * return 'this_plugin' to allow chaining methods. */\n    if (this_plugin.length > 1){\n      this_plugin.each(function() {\n        $(this_plugin).prettyValid(customOptions)\n      });\n      return this_plugin;\n    }\n\n    //* Plugin's logic\n    \n    //* Plugin's private functions\n    /* Functions defined this way are accessible only within the plugin' scope */\n    var init = function()\n    {\n      /* Attach event handler, replacing default browser validation behavior on submit */\n      this_plugin.attr('novalidate', 'novalidate').on('submit', function(e) {\n        e.preventDefault();\n        e.stopPropagation()\n        validate();\n      });\n      return this_plugin;\n    };\n\n    var validate = function()\n    {\n      /* Get all required elements and check for validity */\n      items = this_plugin.find(':required');\n      items = $.grep(items, function(n)\n      {\n        $(n).removeClass(settings.input_invalid_class);\n        /* Keep items when validity.valid is false */\n        return !n.validity.valid;\n      });\n\n      (items.length) ? notification_show(settings.notification.invalid_class, \n        settings.invalid_message) : submit();\n    }\n\n    var submit = function()\n    {\n      /* Detach the previous .on event handler with .off */\n      (settings.ajax) ? submit_ajax() : this_plugin.off('submit').submit();\n    }\n\n    var submit_ajax = function()\n    {\n      \n      $.ajax({\n        type: settings.ajax_method,\n        url: settings.ajax_url,\n        data: this_plugin.serializeArray(),\n        dataType: 'json',\n        success: function(data)\n        {\n          if (data.status){\n            message = (data.message) ? data.message : settings.valid_message;\n            notification_show(settings.notification.valid_class, \n                              message);\n            this_plugin[0].reset();\n          } else {\n            message = (data.message) ? data.message : settings.error_message;\n            notification_show(settings.notification.invalid_class, \n                              message);\n          }\n        },\n        error: function(data)\n        {\n          notification_show(settings.notification.invalid_class, \n                            error_message);\n        }\n      });\n\n    }\n\n    var notification_show = function(type, message)\n    {\n      $.each(items, function(i)\n      {\n        $(this).addClass(settings.input_invalid_class);\n      });\n\n      /* Make sure there is an item to wrap the message */\n      if (0 === $('#' + settings.notification.wrapper.id).length) {\n        item = $('<div/>').attr('id', settings.notification.wrapper.id)\n                   .attr('class', settings.notification.wrapper.class)\n                   .prependTo('body');\n      } else {\n        item = $('#' + settings.notification.wrapper.id);\n      }\n      item.addClass(type)\n          .html(message);\n      //* Blink if it's already there\n      if (item.is(':visible')) {\n        item.fadeTo('fast', 0.5).fadeTo('slow', 1.0);\n      } else {\n        item[settings.notification.show_effect]();\n        item.on('click', function(e)\n        {\n          notification_hide();\n        });\n\n        if (settings.notification.auto_hide) {\n          auto_hide = setTimeout(function() \n        {\n          notification_hide();\n          }, settings.notification.auto_hide);\n        }\n        \n      }\n\n    }\n\n    var notification_hide = function()\n    {\n      $('#' + settings.notification.wrapper.id)[settings.notification.hide_effect]('fast');\n        clearTimeout(auto_hide);\n    }\n\n    var item_validation = function(item)\n    {\n      return item[0].validity.valid;\n      item.addClass(settings.notification.invalid_class);\n    }\n\n\n    //* Plugin's public functions\n    /* Expose functions by attaching them to 'this'\n     * or in this case 'this_plugin' former defined */\n    this_plugin.public_function = function(param)\n    {\n      //* Do something\n      console.log('this is a public funtion with param:' + param);\n    };\n\n    //* Plugin's initialization\n    return init();\n\n  }\n\n})(jQuery);\n"]}