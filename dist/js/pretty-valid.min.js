(function() {
  'use strict';

  var globals = typeof global === 'undefined' ? self : global;
  if (typeof globals.require === 'function') return;

  var modules = {};
  var cache = {};
  var aliases = {};
  var has = {}.hasOwnProperty;

  var expRe = /^\.\.?(\/|$)/;
  var expand = function(root, name) {
    var results = [], part;
    var parts = (expRe.test(name) ? root + '/' + name : name).split('/');
    for (var i = 0, length = parts.length; i < length; i++) {
      part = parts[i];
      if (part === '..') {
        results.pop();
      } else if (part !== '.' && part !== '') {
        results.push(part);
      }
    }
    return results.join('/');
  };

  var dirname = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  var localRequire = function(path) {
    return function expanded(name) {
      var absolute = expand(dirname(path), name);
      return globals.require(absolute, path);
    };
  };

  var initModule = function(name, definition) {
    var hot = hmr && hmr.createHot(name);
    var module = {id: name, exports: {}, hot: hot};
    cache[name] = module;
    definition(module.exports, localRequire(name), module);
    return module.exports;
  };

  var expandAlias = function(name) {
    var val = aliases[name];
    return (val && name !== val) ? expandAlias(val) : name;
  };

  var _resolve = function(name, dep) {
    return expandAlias(expand(dirname(name), dep));
  };

  var require = function(name, loaderPath) {
    if (loaderPath == null) loaderPath = '/';
    var path = expandAlias(name);

    if (has.call(cache, path)) return cache[path].exports;
    if (has.call(modules, path)) return initModule(path, modules[path]);

    throw new Error("Cannot find module '" + name + "' from '" + loaderPath + "'");
  };

  require.alias = function(from, to) {
    aliases[to] = from;
  };

  var extRe = /\.[^.\/]+$/;
  var indexRe = /\/index(\.[^\/]+)?$/;
  var addExtensions = function(bundle) {
    if (extRe.test(bundle)) {
      var alias = bundle.replace(extRe, '');
      if (!has.call(aliases, alias) || aliases[alias].replace(extRe, '') === alias + '/index') {
        aliases[alias] = bundle;
      }
    }

    if (indexRe.test(bundle)) {
      var iAlias = bundle.replace(indexRe, '');
      if (!has.call(aliases, iAlias)) {
        aliases[iAlias] = bundle;
      }
    }
  };

  require.register = require.define = function(bundle, fn) {
    if (bundle && typeof bundle === 'object') {
      for (var key in bundle) {
        if (has.call(bundle, key)) {
          require.register(key, bundle[key]);
        }
      }
    } else {
      modules[bundle] = fn;
      delete cache[bundle];
      addExtensions(bundle);
    }
  };

  require.list = function() {
    var list = [];
    for (var item in modules) {
      if (has.call(modules, item)) {
        list.push(item);
      }
    }
    return list;
  };

  var hmr = globals._hmr && new globals._hmr(_resolve, require, modules, cache);
  require._cache = cache;
  require.hmr = hmr && hmr.wrap;
  require.brunch = true;
  globals.require = require;
})();

(function() {
var global = typeof window === 'undefined' ? this : window;
var __makeRelativeRequire = function(require, mappings, pref) {
  var none = {};
  var tryReq = function(name, pref) {
    var val;
    try {
      val = require(pref + '/node_modules/' + name);
      return val;
    } catch (e) {
      if (e.toString().indexOf('Cannot find module') === -1) {
        throw e;
      }

      if (pref.indexOf('node_modules') !== -1) {
        var s = pref.split('/');
        var i = s.lastIndexOf('node_modules');
        var newPref = s.slice(0, i).join('/');
        return tryReq(name, newPref);
      }
    }
    return none;
  };
  return function(name) {
    if (name in mappings) name = mappings[name];
    if (!name) return;
    if (name[0] !== '.' && pref) {
      var val = tryReq(name, pref);
      if (val !== none) return val;
    }
    return require(name);
  }
};
/*! Pretty Valid v0.5.3 http://codeinalabmx.github.io/pretty-valid */

/*
 * Pretty Valid v0.5.3
 *
 * Custom HTML5 form validation dialogues
 * http://codeinalabmx.github.io/pretty-valid
 * Licence: MIT
 * Author: A59327424 @ codeinalab.com
 * 
 * Reference:
 *
 * https://learn.jquery.com/plugins/basic-plugin-creation/
 * https://jqueryboilerplate.com/
 * http://scriptble.com/2011/02/14/expanding-the-jquery-plugin-development-pattern/
 * 
 */

// the semi-colon before the function invocation is a safety
// net against concatenated scripts and/or other plugins
// that are not closed properly.
;(function($)
{

  //* Plugin's name
  /* Set the plugin's name into the jQuery.fn namespace */
  $.fn.prettyValid = function(custom_settings) {

    //* Plugin' settings
    /* Define private variables within the plugin' scope.
     * To avoid scope issues, assign 'this' to 'this_plugin'
     * to reference this class from internal events and functions. */
    var this_plugin = this; /* This is also the element attached to */
    var items, item, item_type, item_value, auto_hide, result, attr_pattern, 
        attr_minlength, attr_maxlength, attr_min, attr_max;
    /* Use the default jQuery.extend utility to merge
     * default settings with with the ones set per instance.
     * This is the easiest way to have default options.
     */
    var settings = $.extend(true, {
      //* Plugin's default settings
      notification: {
        wrapper: {
          id: 'notification', // String
          class: 'notification', // String
        },
        message: {
          valid: 'Everything looks good.', // String
          invalid: 'Something is missing.', // String
          error: 'An error ocurred.', // String
        },
        invalid_class: 'warning', // String
        valid_class: 'success', // String
        auto_hide: 8000, // Boolean false/Milliseconds
        effect: 'fade', // String fade/slide
        // @todo show/hide effect should be generated from notification.effect setting 
        show_effect: 'fadeIn', // fadeIn/slideDown
        hide_effect: 'fadeOut', // fadeOut/slideUp
        input_invalid_class: 'is-invalid', // String
        input_valid_class: 'is-valid', // String
      },
      /* Enable send form data via ajax */
      ajax: {
        url: '', // String
        method: 'POST', // POST/GET
      },
      /* Enable google reCaptcha render
       * Get the keys from the google reCaptcha admin console
       * and the anguage code from https://developers.google.com/recaptcha/docs/language 
       * reCaptcha error message is handled by the backend script */
      g_recaptcha: {
        site_key: '', // String
        class: 'g-recaptcha-wrapper', // String
        language: 'es-419', // String
        action: 'homepage', // String
        badge: 'inline', // String bottomright bottomleft inline
      },
    }, custom_settings);

    /* In order to create multiple instances
     * of the plugin attached to different DOM elements
     * loop through each of the elements 
     * return 'this_plugin' to allow chaining methods. */
    if (this.length > 1){
      this.each(function() {
        $(this).prettyValid(custom_settings)
      });
      return this;
    }

    //* Plugin's logic
    
    //* Plugin's private functions
    /* Functions defined this way are accessible only within the plugin' scope */
    var init = function()
    {

      /* Attach event handler, replacing default browser validation behavior on submit */
      this_plugin.attr('novalidate', 'novalidate').on('submit', function(e) {
        e.preventDefault();
        e.stopPropagation()
        validate();
      });
      if (settings.g_recaptcha.site_key) {
        g_recaptcha_init();
      }
      console.log('Pretty valid initialized: bind validate function to submit event, init recaptcha if site key isset.');
      return this_plugin;
    };

    var validity_support = function () {
      var input = document.createElement('input');
      return (
              'validity' in input && 
              'badInput' in input.validity && 
              'patternMismatch' in input.validity && 
              'rangeOverflow' in input.validity && 
              'rangeUnderflow' in input.validity && 
              'stepMismatch' in input.validity && 
              'tooLong' in input.validity && 
              'tooShort' in input.validity && 
              'typeMismatch' in input.validity && 
              'valid' in input.validity && 
              'valueMissing' in input.validity
              );
    };

    var validate = function()
    {

      /* Get all required elements and check for validity */
      items = this_plugin.find(':required');
      items = $.grep(items, function(item)
      {
        $(item).removeClass(settings.input_invalid_class + ' ' + settings.input_invalid_class);
        
        return item_validation(item);
        
      });

      (items.length) ? notification_show(settings.notification.invalid_class, 
                                         settings.notification.message.invalid) : submit();

    }

    var item_validation = function(item)
    {

      if (!validity_support()) {

        result = item.validity.valid;

      } else {
        item_type = $(item)[0]['type'].replace('-', '');
        result = custom_validation[item_type](item);
        if (!result) {
          if ($(item).data('hint')) {
            $(item).after('<span class="hint">' + $(item).data('hint') + '</span>');
          }
        }
      }

      (result) ? $(item).addClass(settings.notification.input_valid_class).removeClass(settings.notification.input_invalid_class) 
               : $(item).addClass(settings.notification.input_invalid_class).removeClass(settings.notification.input_valid_class);

      return result;
    }

    var g_recaptcha_init = function()
    {

      /* Check if there is more than one reCaptcha wrapper */
      g_recaptcha_wrapper = 'g-recaptcha-wrapper-' + $('.' + settings.g_recaptcha.class).length;
      if (0 === $('#' + g_recaptcha_wrapper).length) {
        item = $('<div/>').attr('id', g_recaptcha_wrapper)
                   .attr('class', settings.g_recaptcha.class)
                   .appendTo(this_plugin[0]);
      } else {
        item = $('#' + g_recaptcha_wrapper);
      }
      $.getScript('https://www.google.com/recaptcha/api.js?render=explicit&hl=' + settings.g_recaptcha.language, function()
      {
        grecaptcha.ready(function() {
          g_recaptcha_id = grecaptcha.render(g_recaptcha_wrapper, 
          {
            'sitekey': settings.g_recaptcha.site_key,
            'size': 'invisible',
            'badge': settings.g_recaptcha.badge,
          });
          //* grecaptcha.execute is called on submit action, as reCAPTCHA tokens expire after two minutes.
          //* ref. https://developers.google.com/recaptcha/docs/v3
        });
      });
      console.log('reCaptcha initialized: add recaptcha script tag, render badge.');

    }
    

    var submit = function()
    {

      grecaptcha.execute(g_recaptcha_id, {action: settings.g_recaptcha.action}).then(function(token)
      {                       
        $('#g-recaptcha-response').val(token);
        /* Detach the previous .on event handler with .off */
        (settings.ajax.url) ? submit_ajax() : this_plugin.off('submit').submit();
      });
      console.log('reCaptcha execute, then submit.');
    }

    var submit_ajax = function()
    {
      let serialized_data = this_plugin.serializeArray();
      serialized_data.push({name: 'is-ajax', value: true});
      $.ajax({
        type: settings.ajax.method,
        url: settings.ajax.url,
        data: serialized_data,
        dataType: 'json',
        success: function(data)
        {
          if (data.status){
            message = (data.message) ? data.message : settings.notification.message.valid;
            notification_show(settings.notification.valid_class, 
                              message);
            this_plugin[0].reset();
          } else {
            message = (data.message) ? data.message : settings.notification.message.error;
            notification_show(settings.notification.invalid_class, 
                              message);
          }
        },
        error: function(data)
        {
          notification_show(settings.notification.invalid_class, 
                            settings.notification.message.error);
        }
      });

    }

    var notification_show = function(type, message)
    {

      $.each(items, function(i)
      {
        $(this).addClass(settings.input_invalid_class);
      });
      /* Make sure there is an item to wrap the message */
      if (0 === $('#' + this_plugin[0].id + ' .' + settings.notification.wrapper.class).length) {
        item = $('<div/>');
        item.addClass(settings.notification.wrapper.class)
            .addClass(settings.notification.effect)
            .prependTo(this_plugin);
      } else {
        item = $('#' + this_plugin[0].id + ' .' + settings.notification.wrapper.class);
      }

      //* Blink if it's already there
      if (item.is(':visible')) {
        item.removeClass('success warning error information')
            .addClass(type)
            .html(message)
            .fadeTo('fast', 0.5)
            .fadeTo('slow', 1.0);
      } else {
        item.addClass(type).html(message)[settings.notification.show_effect]();
        item.on('click', function(e)
        {
          notification_hide();
        });
        if (!$.isNumeric(settings.notification.auto_hide)) {
          auto_hide = setTimeout(function() 
        {
          notification_hide();
          }, settings.notification.auto_hide);
        }
      }

    }


    var notification_hide = function()
    {

      $('#' + this_plugin[0].id + ' .' + settings.notification.wrapper.class)[settings.notification.hide_effect]('fast');
        clearTimeout(auto_hide);

    }

    var custom_validation = {

      text: function(item) {
        item_value = $(item).val();
        attr_maxlength = $(item).attr('maxLength') || null;
        //pattern minlength maxlength
        return /\w+/.test(item_value);  
      },
      email: function(item) {
        item_value = $(item).val();
        return /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/.test(item_value);
      },
      textarea: function(item) {
        item_value = $(item).val();
        return /\w+/.test(item_value);
      },
      selectone: function(item) {
        return false;
      },
      file: function(item) {
        //acept, multiple
        return false;
      },
      checkbox: function(item) {
        return $(item).is(':checked')
      },
      radio: function(item) {
        return $(item).is(':checked');
      },
      password: function() {
        
        item_value = $(item).val();
        return false;
      }

    };


    //* Plugin's public functions
    /* Expose functions by attaching them to 'this'
     * or in this case 'this_plugin' former defined */
    this_plugin.notification_show = function(type, message)
    {

      notification_show(type, message);

    }

    this_plugin.notification_hide = function()
    {

      notification_hide();

    }



    //* Plugin's initialization
    return init();

  }

})(jQuery);

require.register("___globals___", function(exports, require, module) {
  
});})();require('___globals___');

/* jshint ignore:start */
(function() {
  var WebSocket = window.WebSocket || window.MozWebSocket;
  var br = window.brunch = (window.brunch || {});
  var ar = br['auto-reload'] = (br['auto-reload'] || {});
  if (!WebSocket || ar.disabled) return;
  if (window._ar) return;
  window._ar = true;

  var cacheBuster = function(url){
    var date = Math.round(Date.now() / 1000).toString();
    url = url.replace(/(\&|\\?)cacheBuster=\d*/, '');
    return url + (url.indexOf('?') >= 0 ? '&' : '?') +'cacheBuster=' + date;
  };

  var browser = navigator.userAgent.toLowerCase();
  var forceRepaint = ar.forceRepaint || browser.indexOf('chrome') > -1;

  var reloaders = {
    page: function(){
      window.location.reload(true);
    },

    stylesheet: function(){
      [].slice
        .call(document.querySelectorAll('link[rel=stylesheet]'))
        .filter(function(link) {
          var val = link.getAttribute('data-autoreload');
          return link.href && val != 'false';
        })
        .forEach(function(link) {
          link.href = cacheBuster(link.href);
        });

      // Hack to force page repaint after 25ms.
      if (forceRepaint) setTimeout(function() { document.body.offsetHeight; }, 25);
    },

    javascript: function(){
      var scripts = [].slice.call(document.querySelectorAll('script'));
      var textScripts = scripts.map(function(script) { return script.text }).filter(function(text) { return text.length > 0 });
      var srcScripts = scripts.filter(function(script) { return script.src });

      var loaded = 0;
      var all = srcScripts.length;
      var onLoad = function() {
        loaded = loaded + 1;
        if (loaded === all) {
          textScripts.forEach(function(script) { eval(script); });
        }
      }

      srcScripts
        .forEach(function(script) {
          var src = script.src;
          script.remove();
          var newScript = document.createElement('script');
          newScript.src = cacheBuster(src);
          newScript.async = true;
          newScript.onload = onLoad;
          document.head.appendChild(newScript);
        });
    }
  };

  var port = ar.port || 9485;
  var host = ar.host || br.server || window.location.hostname || 'localhost';

  var connect = function(){
    var protocol = window.location.protocol == 'https:' ? 'wss://' : 'ws://';
    var connection = new WebSocket(protocol + host + ':' + port);
    connection.onmessage = function(event) {
      var message = event.data;
      var reloader = reloaders[message] || reloaders.page;
      reloader();
    };
    connection.onerror = function(){
      if (connection.readyState) connection.close();
    };
    connection.onclose = function(){
      window.setTimeout(connect, 1000);
    };
  };
  if(ar.disabled == undefined || !ar.disabled){
    connect();
  }
})();
/* jshint ignore:end */
;
//# sourceMappingURL=pretty-valid.min.js.map