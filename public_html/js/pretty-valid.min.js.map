{"version":3,"sources":["src/js/pretty-valid_draft.js"],"names":["$","jQuery","fn","prettyValid","custom_settings","items","item","auto_hide","this_plugin","this","settings","extend","notification","wrapper","id","class","message","valid","invalid","error","invalid_class","valid_class","show_effect","hide_effect","input_invalid_class","input_valid_class","ajax","url","method","g_recaptcha","site_key","language","action","length","each","validate","find","grep","n","removeClass","validity","notification_show","submit","g_recaptcha_init","g_recaptcha_wrapper","attr","appendTo","getScript","grecaptcha","ready","g_recaptcha_id","render","sitekey","size","execute","then","token","val","submit_ajax","off","type","data","serializeArray","dataType","success","status","reset","i","addClass","prependTo","is","html","delay","fadeTo","on","e","notification_hide","isNumeric","setTimeout","clearTimeout","preventDefault","stopPropagation"],"mappings":"+yCAqBAA,sCAAAA,EA2PAC,QAtPAC,GAAAC,YAAA,SAAAC,GAMA,IACAC,EAAAC,EAAAC,EADAC,EAAAC,KAMAC,EAAAV,EAAAW,QAAA,EAAA,CAEAC,aAAA,CACAC,QAAA,CACAC,GAAA,eACAC,MAAA,gBAEAC,QAAA,CACAC,MAAA,yBACAC,QAAA,wBACAC,MAAA,qBAEAC,cAAA,UACAC,YAAA,UACAd,UAAA,IACAe,YAAA,SACAC,YAAA,WAEAC,oBAAA,aACAC,kBAAA,WAEAC,KAAA,CACAC,IAAA,GACAC,OAAA,QAMAC,YAAA,CACAC,SAAA,GACAf,MAAA,sBACAgB,SAAA,SACAC,OAAA,aAEA5B,GAMA,GAAAK,KAAAwB,OAAA,EAIA,OAHAxB,KAAAyB,KAAA,WACAlC,EAAAS,MAAAN,YAAAC,KAEAK,KAOA,IAiBA0B,EAAA,WAIA9B,EAAAG,EAAA4B,KAAA,cACA/B,EAAAL,EAAAqC,KAAAhC,EAAA,SAAAiC,GAIA,OAFAtC,EAAAsC,GAAAC,YAAA7B,EAAAc,sBAEAc,EAAAE,SAAAvB,SAGA,OAAAwB,EAAA/B,EAAAE,aAAAQ,cACAV,EAAAE,aAAAI,QAAAE,SAAAwB,KAKAC,EAAA,WAIAC,oBAAA,uBAAA5C,EAAA,IAAAU,EAAAmB,YAAAd,OAAAkB,OAEA3B,EADA,IAAAN,EAAA,IAAA4C,qBAAAX,OACAjC,EAAA,UAAA6C,KAAA,KAAAD,qBACAC,KAAA,QAAAnC,EAAAmB,YAAAd,OACA+B,SAAAtC,EAAA,IAEAR,EAAA,IAAA4C,qBAEA5C,EAAA+C,UAAA,8DAAArC,EAAAmB,YAAAE,SAAA,WAEAiB,WAAAC,MAAA,WACAC,eAAAF,WAAAG,OAAAP,oBACA,CACAQ,QAAA1C,EAAAmB,YAAAC,SACAuB,KAAA,cAEAL,WAAAM,QAAAJ,eAAA,CAAAlB,OAAAtB,EAAAmB,YAAAG,SAAAuB,KAAA,SAAAC,GAEAxD,EAAA,yBAAAyD,IAAAD,UAQAd,EAAA,WAIAhC,EAAAgB,KAAA,IAAAgC,IAAAlD,EAAAmD,IAAA,UAAAjB,UAIAgB,EAAA,WAGA1D,EAAA0B,KAAA,CACAkC,KAAAlD,EAAAgB,KAAAE,OACAD,IAAAjB,EAAAgB,KAAAC,IACAkC,KAAArD,EAAAsD,iBACAC,SAAA,OACAC,QAAA,SAAAH,GAEAA,EAAAI,QACAjD,QAAA6C,EAAA,QAAAA,EAAA7C,QAAAN,EAAAE,aAAAI,QAAAC,MACAwB,EAAA/B,EAAAE,aAAAS,YACAL,SACAR,EAAA,GAAA0D,UAEAlD,QAAA6C,EAAA,QAAAA,EAAA7C,QAAAN,EAAAE,aAAAI,QAAAG,MACAsB,EAAA/B,EAAAE,aAAAQ,cACAJ,WAGAG,MAAA,SAAA0C,GAEApB,EAAA/B,EAAAE,aAAAQ,cACAV,EAAAE,aAAAI,QAAAG,WAMAsB,EAAA,SAAAmB,EAAA5C,GAGAhB,EAAAkC,KAAA7B,EAAA,SAAA8D,GAEAnE,EAAAS,MAAA2D,SAAA1D,EAAAc,wBAIAlB,EADA,IAAAN,EAAA,IAAAQ,EAAA,GAAAM,GAAA,KAAAJ,EAAAE,aAAAC,QAAAE,OAAAkB,OACAjC,EAAA,UAAA6C,KAAA,QAAAnC,EAAAE,aAAAC,QAAAE,OAAAsD,UAAA7D,GAEAR,EAAA,IAAAQ,EAAA,GAAAM,GAAA,KAAAJ,EAAAE,aAAAC,QAAAE,QAIAuD,GAAA,YACAhE,EAAAiC,YAAA,qCACA6B,SAAAR,GACAW,KAAAvD,GACAwD,MAAA,KACAC,OAAA,OAAA,IACAA,OAAA,OAAA,IAEAnE,EAAA8D,SAAAR,GAAAW,KAAAvD,GAAAN,EAAAE,aAAAU,eACAhB,EAAAoE,GAAA,QAAA,SAAAC,GAEAC,MAEA5E,EAAA6E,UAAAnE,EAAAE,aAAAL,aACAA,EAAAuE,WAAA,WAEAF,KACAlE,EAAAE,aAAAL,cAOAqE,EAAA,WAGA5E,EAAA,IAAAQ,EAAA,GAAAM,GAAA,KAAAJ,EAAAE,aAAAC,QAAAE,OAAAL,EAAAE,aAAAW,aAAA,QACAwD,aAAAxE,IAgCA,OAjBAC,EAAAiC,kBAAA,SAAAmB,EAAA5C,GAGAyB,EAAAmB,EAAA5C,IAIAR,EAAAoE,kBAAA,WAGAA,KAvKApE,EAAAqC,KAAA,aAAA,cAAA6B,GAAA,SAAA,SAAAC,GACAA,EAAAK,iBACAL,EAAAM,kBACA9C,MAEAzB,EAAAmB,YAAAC,UACAa,IAEAnC","sourcesContent":["/*! Pretty Valid v0.3.0 http://codeinalabmx.github.io/pretty-valid License: MIT */\n\n/*\n * Pretty Valid v0.3.0\n *\n * Custom HTML5 form validation dialogues\n * http://codeinalabmx.github.io/pretty-valid\n * Licence: MIT\n * Author: hEy @ codeinalab.com\n * \n * Reference:\n *\n * https://learn.jquery.com/plugins/basic-plugin-creation/\n * https://jqueryboilerplate.com/\n * http://scriptble.com/2011/02/14/expanding-the-jquery-plugin-development-pattern/\n * \n */\n\n// the semi-colon before the function invocation is a safety\n// net against concatenated scripts and/or other plugins\n// that are not closed properly.\n;(function($)\n{\n\n  //* Plugin's name\n  /* Set the plugin's name into the jQuery.fn namespace */\n  $.fn.prettyValid = function(custom_settings) {\n\n    //* Plugin' settings\n    /* Define private variables within the plugin' scope.\n     * To avoid scope issues, assign 'this' to 'this_plugin'\n     * to reference this class from internal events and functions. */\n    var this_plugin = this; /* This is also the element attached to */\n    var items, item, auto_hide;\n    /* Use the default jQuery.extend utility to merge\n     * default settings with with the ones set per instance.\n     * This is the easiest way to have default options.\n     */\n    var settings = $.extend(true, {\n      //* Plugin's default settings\n      notification: {\n        wrapper: {\n          id: 'notification', // String\n          class: 'notification', // String\n        },\n        message: {\n          valid: 'Everything looks good.', // String\n          invalid: 'Something is missing.', // String\n          error: 'An error ocurred.', // String\n        },\n        invalid_class: 'warning', // String\n        valid_class: 'success', // String\n        auto_hide: 8000, // Boolean false/Milliseconds\n        show_effect: 'fadeIn', // fadeIn/slideDown\n        hide_effect: 'fadeOut', // fadeOut/slideUp\n      },\n      input_invalid_class: 'is-invalid', // String\n      input_valid_class: 'is-valid', // String\n      /* Enable send form data via ajax */\n      ajax: {\n        url: '', // String\n        method: 'POST', // POST/GET\n      },\n      /* Enable google reCaptcha render\n       * Get the keys from the google reCaptcha admin console\n       * and the anguage code from https://developers.google.com/recaptcha/docs/language \n       * reCaptcha error message is handled by the backend script */\n      g_recaptcha: {\n        site_key: '', // String\n        class: 'g-recaptcha-wrapper', // String\n        language: 'es-419', // String\n        action: 'homepage', // String\n      },\n    }, custom_settings);\n\n    /* In order to create multiple instances\n     * of the plugin attached to different DOM elements\n     * loop through each of the elements \n     * return 'this_plugin' to allow chaining methods. */\n    if (this.length > 1){\n      this.each(function() {\n        $(this).prettyValid(custom_settings)\n      });\n      return this;\n    }\n\n    //* Plugin's logic\n    \n    //* Plugin's private functions\n    /* Functions defined this way are accessible only within the plugin' scope */\n    var init = function()\n    {\n\n      /* Attach event handler, replacing default browser validation behavior on submit */\n      this_plugin.attr('novalidate', 'novalidate').on('submit', function(e) {\n        e.preventDefault();\n        e.stopPropagation()\n        validate();\n      });\n      if (settings.g_recaptcha.site_key) {\n        g_recaptcha_init();\n      }\n      return this_plugin;\n\n    };\n\n\n    var validate = function()\n    {\n\n      /* Get all required elements and check for validity */\n      items = this_plugin.find(':required');\n      items = $.grep(items, function(n)\n      {\n        $(n).removeClass(settings.input_invalid_class);\n        /* Keep items when validity.valid is false */\n        return !n.validity.valid;\n      });\n\n      (items.length) ? notification_show(settings.notification.invalid_class, \n        settings.notification.message.invalid) : submit();\n\n    }\n\n\n    var g_recaptcha_init = function()\n    {\n\n      /* Check if there is more than one reCaptcha wrapper */\n      g_recaptcha_wrapper = 'g-recaptcha-wrapper-' + $('.' + settings.g_recaptcha.class).length;\n      if (0 === $('#' + g_recaptcha_wrapper).length) {\n        item = $('<div/>').attr('id', g_recaptcha_wrapper)\n                   .attr('class', settings.g_recaptcha.class)\n                   .appendTo(this_plugin[0]);\n      } else {\n        item = $('#' + g_recaptcha_wrapper);\n      }\n      $.getScript('https://www.google.com/recaptcha/api.js?render=explicit&hl=' + settings.g_recaptcha.language, function()\n      {\n        grecaptcha.ready(function() {\n          g_recaptcha_id = grecaptcha.render(g_recaptcha_wrapper, \n          {\n            'sitekey': settings.g_recaptcha.site_key,\n            'size': 'invisible'\n          });\n          grecaptcha.execute(g_recaptcha_id, {action: settings.g_recaptcha.action}).then(function(token)\n          {                       \n            $('#g-recaptcha-response').val(token);\n          });\n        });\n      });\n\n    }\n    \n\n    var submit = function()\n    {\n\n      /* Detach the previous .on event handler with .off */\n      (settings.ajax.url) ? submit_ajax() : this_plugin.off('submit').submit();\n    \n    }\n\n    var submit_ajax = function()\n    {\n      \n      $.ajax({\n        type: settings.ajax.method,\n        url: settings.ajax.url,\n        data: this_plugin.serializeArray(),\n        dataType: 'json',\n        success: function(data)\n        {\n          if (data.status){\n            message = (data.message) ? data.message : settings.notification.message.valid;\n            notification_show(settings.notification.valid_class, \n                              message);\n            this_plugin[0].reset();\n          } else {\n            message = (data.message) ? data.message : settings.notification.message.error;\n            notification_show(settings.notification.invalid_class, \n                              message);\n          }\n        },\n        error: function(data)\n        {\n          notification_show(settings.notification.invalid_class, \n                            settings.notification.message.error);\n        }\n      });\n\n    }\n\n    var notification_show = function(type, message)\n    {\n\n      $.each(items, function(i)\n      {\n        $(this).addClass(settings.input_invalid_class);\n      });\n      /* Make sure there is an item to wrap the message */\n      if (0 === $('#' + this_plugin[0].id + ' .' + settings.notification.wrapper.class).length) {\n        item = $('<div/>').attr('class', settings.notification.wrapper.class).prependTo(this_plugin);\n      } else {\n        item = $('#' + this_plugin[0].id + ' .' + settings.notification.wrapper.class);\n      }\n\n      //* Blink if it's already there\n      if (item.is(':visible')) {\n        item.removeClass('success warning error information')\n            .addClass(type)\n            .html(message)\n            .delay(500)\n            .fadeTo('fast', 0.5)\n            .fadeTo('slow', 1.0);\n      } else {\n        item.addClass(type).html(message)[settings.notification.show_effect]();\n        item.on('click', function(e)\n        {\n          notification_hide();\n        });\n        if (!$.isNumeric(settings.notification.auto_hide)) {\n          auto_hide = setTimeout(function() \n        {\n          notification_hide();\n          }, settings.notification.auto_hide);\n        }\n      }\n\n    }\n\n\n    var notification_hide = function()\n    {\n\n      $('#' + this_plugin[0].id + ' .' + settings.notification.wrapper.class)[settings.notification.hide_effect]('fast');\n        clearTimeout(auto_hide);\n\n    }\n\n\n    var item_validation = function(item)\n    {\n      return item[0].validity.valid;\n      item.addClass(settings.notification.invalid_class);\n    }\n\n\n    //* Plugin's public functions\n    /* Expose functions by attaching them to 'this'\n     * or in this case 'this_plugin' former defined */\n    this_plugin.notification_show = function(type, message)\n    {\n\n      notification_show(type, message);\n\n    }\n\n    this_plugin.notification_hide = function()\n    {\n\n      notification_hide();\n\n    }\n\n\n\n    //* Plugin's initialization\n    return init();\n\n  }\n\n})(jQuery);\n"]}