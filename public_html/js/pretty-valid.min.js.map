{"version":3,"sources":["src/js/pretty-valid_draft.js"],"names":["$","window","document","undefined","pluginName","defaults","defaultproperty","Plugin","element","options","this","settings","extend","_defaults","_name","init","prototype","console","log","pluginfunction","text","pluginpublicfunction","param","pluginprivatefunction","fn","each","data","args","jQuery"],"mappings":"+0CA6BA,SAAAA,EAAAC,EAAAC,EAAAC,GAEA,aAYA,IAAAC,EAAA,cACAC,EAAA,CACAC,gBAAA,iBAIA,SAAAC,EAAAC,EAAAC,GACAC,KAAAF,QAAAA,EAMAE,KAAAC,SAAAX,EAAAY,OAAA,GAAAP,EAAAI,GACAC,KAAAG,UAAAR,EACAK,KAAAI,MAAAV,EACAM,KAAAK,OAKAf,EAAAY,OAAAL,EAAAS,UAAA,CACAD,KAAA,WAQAE,QAAAC,IAAA,SAAAR,KAAAG,UAAAP,iBACAI,KAAAS,eAAAT,KAAAC,SAAAL,kBAEAa,eAAA,SAAAC,GAEAH,QAAAC,IAAAE,IAEAC,qBAAA,SAAAC,GAEAC,EAAAD,GACAL,QAAAC,IAAAI,MAKA,IAAAC,EAAA,SAAAD,GAEAL,QAAAC,IAAAI,IAKAtB,EAAAwB,GAAApB,GAAA,SAAAK,GAOA,OAAAC,KAAAe,KAAA,WAIAzB,EAAA0B,KAAAhB,KAAAN,IAMAa,QAAAC,IAAAT,GACA,iBAAAA,GACAQ,QAAAC,IAAAS,QAPAV,QAAAC,IAAA,yBAEAlB,EAAA0B,KAAAhB,KAAAN,EAAA,IAAAG,EAAAG,KAAAD,QAhFA,CA4FAmB,OAAA3B,OAAAC","sourcesContent":["/*! Pretty Valid v0.1.0 http://codeinalabmx.github.io/pretty-valid License: MIT */\n/*\n * Pretty Valid v0.1.0\n *\n * Custom HTML5 form validation dialogues\n * http://codeinalabmx.github.io/pretty-valid\n * Licence: MIT\n * Author: hEy @ codeinalab.com\n * \n * Boilerplate\n * http://jqueryboilerplate.com v4.0.0\n * \n * Reference:\n * \n * https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation\n * https://learn.jquery.com/plugins/basic-plugin-creation/\n * https://github.com/johndugan/jquery-plugin-boilerplate\n * http://www.acuriousanimal.com/2013/01/15/things-i-learned-creating-a-jquery-plugin-part-i.html\n * https://websanova.com/blog/jquery/the-ultimate-guide-to-writing-jquery-plugins\n * https://brolik.com/blog/how-to-create-a-jquery-plugin/ \n * https://www.dotnetcurry.com/jquery/1069/authoring-jquery-plugins\n * https://github.com/aloisdg/awesome-regex\n * https://www.queness.com/post/112/a-really-simple-jquery-plugin-tutorial\n * https://stackoverflow.com/questions/12880256/jquery-plugin-creation-and-public-facing-methods\n * https://john-dugan.com/jquery-plugin-boilerplate-explained/\n */\n\n// the semi-colon before function invocation is a safety net against concatenated\n// scripts and/or other plugins which may not be closed properly.\n;( function( $, window, document, undefined ) {\n\n    'use strict';\n\n        // undefined is used here as the undefined global variable in ECMAScript 3 is\n        // mutable (ie. it can be changed by someone else). undefined isn't really being\n        // passed in so we can ensure the value of it is truly undefined. In ES5, undefined\n        // can no longer be modified.\n\n        // window and document are passed through as local variables rather than global\n        // as this (slightly) quickens the resolution process and can be more efficiently\n        // minified (especially when both are regularly referenced in your plugin).\n\n        // Create the defaults once\n        var pluginName = 'prettyValid',\n            defaults = {\n                defaultproperty: 'default value'\n            };\n\n        // The actual plugin constructor\n        function Plugin ( element, options ) {\n            this.element = element;\n\n            // jQuery has an extend method which merges the contents of two or\n            // more objects, storing the result in the first object. The first object\n            // is generally empty as we don't want to alter the default options for\n            // future instances of the plugin\n            this.settings = $.extend( {}, defaults, options );\n            this._defaults = defaults;\n            this._name = pluginName;\n            this.init();\n        }\n\n\n        // Avoid Plugin.prototype conflicts\n        $.extend( Plugin.prototype, {\n            init: function() {\n\n                // Place initialization logic here\n                // You already have access to the DOM element and\n                // the options via the instance, e.g. this.element\n                // and this.settings\n                // you can add more functions like the one below and\n                // call them like the example below\n                console.log('init: '+this._defaults.defaultproperty);\n                this.pluginfunction( this.settings.defaultproperty );\n            },\n            pluginfunction: function( text ) {\n                // some logic\n                console.log(text);\n            },\n            pluginpublicfunction: function(param)\n            {\n                pluginprivatefunction(param);\n                console.log(param);\n            },\n        } );\n\n        \n        let pluginprivatefunction = function(param)\n        {\n            console.log(param);\n        }\n\n        // A really lightweight plugin wrapper around the constructor,\n        // preventing against multiple instantiations\n        $.fn[ pluginName ] = function( options ) {\n            // slice arguments to leave only arguments after function name\n            // \n            // var args = Array.prototype.slice.call(arguments, 1);\n\n            //console.log('direct ' + options);\n\n            return this.each( function() {\n                //* \n                //var item = $(this), instance = item.data('CustomSelect');\n                //let item = $(this), instance = plugin.data(pluginName);\n                if ( !$.data( this, pluginName ) ) {\n                    console.log('instance isnt created');\n                //if ( !$.data( this, \"plugin_\" + pluginName ) ) {\n                    $.data( this, pluginName, new Plugin( this, options ) );\n                } else {\n                // if instance already created call method\n                    console.log(options);\n                    if (typeof options === 'string') {\n                        console.log(args);\n                        //this.data[pluginName][options].apply(this.data[pluginName], args);\n                    }\n                }\n            } );\n        };\n\n} )( jQuery, window, document );"]}