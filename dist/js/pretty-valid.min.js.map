{"version":3,"sources":["src/js/pretty-valid_draft.js","node_modules/auto-reload-brunch/vendor/auto-reload.js"],"names":[],"mappingsjWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"dist/js/pretty-valid.min.js","sourcesContent":["/*! Pretty Valid v0.5.3 http://codeinalabmx.github.io/pretty-valid */\n\n/*\n * Pretty Valid v0.5.3\n *\n * Custom HTML5 form validation dialogues\n * http://codeinalabmx.github.io/pretty-valid\n * Licence: MIT\n * Author: A59327424 @ codeinalab.com\n * \n * Reference:\n *\n * https://learn.jquery.com/plugins/basic-plugin-creation/\n * https://jqueryboilerplate.com/\n * http://scriptble.com/2011/02/14/expanding-the-jquery-plugin-development-pattern/\n * \n */\n\n// the semi-colon before the function invocation is a safety\n// net against concatenated scripts and/or other plugins\n// that are not closed properly.\n;(function($)\n{\n\n  //* Plugin's name\n  /* Set the plugin's name into the jQuery.fn namespace */\n  $.fn.prettyValid = function(custom_settings) {\n\n    //* Plugin' settings\n    /* Define private variables within the plugin' scope.\n     * To avoid scope issues, assign 'this' to 'this_plugin'\n     * to reference this class from internal events and functions. */\n    var this_plugin = this; /* This is also the element attached to */\n    var items, item, item_type, item_value, auto_hide, result, attr_pattern, \n        attr_minlength, attr_maxlength, attr_min, attr_max;\n    /* Use the default jQuery.extend utility to merge\n     * default settings with with the ones set per instance.\n     * This is the easiest way to have default options.\n     */\n    var settings = $.extend(true, {\n      //* Plugin's default settings\n      notification: {\n        wrapper: {\n          id: 'notification', // String\n          class: 'notification', // String\n        },\n        message: {\n          valid: 'Everything looks good.', // String\n          invalid: 'Something is missing.', // String\n          error: 'An error ocurred.', // String\n        },\n        invalid_class: 'warning', // String\n        valid_class: 'success', // String\n        auto_hide: 8000, // Boolean false/Milliseconds\n        effect: 'fade', // String fade/slide\n        // @todo show/hide effect should be generated from notification.effect setting \n        show_effect: 'fadeIn', // fadeIn/slideDown\n        hide_effect: 'fadeOut', // fadeOut/slideUp\n        input_invalid_class: 'is-invalid', // String\n        input_valid_class: 'is-valid', // String\n      },\n      /* Enable send form data via ajax */\n      ajax: {\n        url: '', // String\n        method: 'POST', // POST/GET\n      },\n      /* Enable google reCaptcha render\n       * Get the keys from the google reCaptcha admin console\n       * and the anguage code from https://developers.google.com/recaptcha/docs/language \n       * reCaptcha error message is handled by the backend script */\n      g_recaptcha: {\n        site_key: '', // String\n        class: 'g-recaptcha-wrapper', // String\n        language: 'es-419', // String\n        action: 'homepage', // String\n        badge: 'inline', // String bottomright bottomleft inline\n      },\n    }, custom_settings);\n\n    /* In order to create multiple instances\n     * of the plugin attached to different DOM elements\n     * loop through each of the elements \n     * return 'this_plugin' to allow chaining methods. */\n    if (this.length > 1){\n      this.each(function() {\n        $(this).prettyValid(custom_settings)\n      });\n      return this;\n    }\n\n    //* Plugin's logic\n    \n    //* Plugin's private functions\n    /* Functions defined this way are accessible only within the plugin' scope */\n    var init = function()\n    {\n\n      /* Attach event handler, replacing default browser validation behavior on submit */\n      this_plugin.attr('novalidate', 'novalidate').on('submit', function(e) {\n        e.preventDefault();\n        e.stopPropagation()\n        validate();\n      });\n      if (settings.g_recaptcha.site_key) {\n        g_recaptcha_init();\n      }\n      console.log('Pretty valid initialized: bind validate function to submit event, init recaptcha if site key isset.');\n      return this_plugin;\n    };\n\n    var validity_support = function () {\n      var input = document.createElement('input');\n      return (\n              'validity' in input && \n              'badInput' in input.validity && \n              'patternMismatch' in input.validity && \n              'rangeOverflow' in input.validity && \n              'rangeUnderflow' in input.validity && \n              'stepMismatch' in input.validity && \n              'tooLong' in input.validity && \n              'tooShort' in input.validity && \n              'typeMismatch' in input.validity && \n              'valid' in input.validity && \n              'valueMissing' in input.validity\n              );\n    };\n\n    var validate = function()\n    {\n\n      /* Get all required elements and check for validity */\n      items = this_plugin.find(':required');\n      items = $.grep(items, function(item)\n      {\n        $(item).removeClass(settings.input_invalid_class + ' ' + settings.input_invalid_class);\n        \n        return item_validation(item);\n        \n      });\n\n      (items.length) ? notification_show(settings.notification.invalid_class, \n                                         settings.notification.message.invalid) : submit();\n\n    }\n\n    var item_validation = function(item)\n    {\n\n      if (!validity_support()) {\n\n        result = item.validity.valid;\n\n      } else {\n        item_type = $(item)[0]['type'].replace('-', '');\n        result = custom_validation[item_type](item);\n        if (!result) {\n          if ($(item).data('hint')) {\n            $(item).after('<span class=\"hint\">' + $(item).data('hint') + '</span>');\n          }\n        }\n      }\n\n      (result) ? $(item).addClass(settings.notification.input_valid_class).removeClass(settings.notification.input_invalid_class) \n               : $(item).addClass(settings.notification.input_invalid_class).removeClass(settings.notification.input_valid_class);\n\n      return result;\n    }\n\n    var g_recaptcha_init = function()\n    {\n\n      /* Check if there is more than one reCaptcha wrapper */\n      g_recaptcha_wrapper = 'g-recaptcha-wrapper-' + $('.' + settings.g_recaptcha.class).length;\n      if (0 === $('#' + g_recaptcha_wrapper).length) {\n        item = $('<div/>').attr('id', g_recaptcha_wrapper)\n                   .attr('class', settings.g_recaptcha.class)\n                   .appendTo(this_plugin[0]);\n      } else {\n        item = $('#' + g_recaptcha_wrapper);\n      }\n      $.getScript('https://www.google.com/recaptcha/api.js?render=explicit&hl=' + settings.g_recaptcha.language, function()\n      {\n        grecaptcha.ready(function() {\n          g_recaptcha_id = grecaptcha.render(g_recaptcha_wrapper, \n          {\n            'sitekey': settings.g_recaptcha.site_key,\n            'size': 'invisible',\n            'badge': settings.g_recaptcha.badge,\n          });\n          //* grecaptcha.execute is called on submit action, as reCAPTCHA tokens expire after two minutes.\n          //* ref. https://developers.google.com/recaptcha/docs/v3\n        });\n      });\n      console.log('reCaptcha initialized: add recaptcha script tag, render badge.');\n\n    }\n    \n\n    var submit = function()\n    {\n\n      grecaptcha.execute(g_recaptcha_id, {action: settings.g_recaptcha.action}).then(function(token)\n      {                       \n        $('#g-recaptcha-response').val(token);\n        /* Detach the previous .on event handler with .off */\n        (settings.ajax.url) ? submit_ajax() : this_plugin.off('submit').submit();\n      });\n      console.log('reCaptcha execute, then submit.');\n    }\n\n    var submit_ajax = function()\n    {\n      let serialized_data = this_plugin.serializeArray();\n      serialized_data.push({name: 'is-ajax', value: true});\n      $.ajax({\n        type: settings.ajax.method,\n        url: settings.ajax.url,\n        data: serialized_data,\n        dataType: 'json',\n        success: function(data)\n        {\n          if (data.status){\n            message = (data.message) ? data.message : settings.notification.message.valid;\n            notification_show(settings.notification.valid_class, \n                              message);\n            this_plugin[0].reset();\n          } else {\n            message = (data.message) ? data.message : settings.notification.message.error;\n            notification_show(settings.notification.invalid_class, \n                              message);\n          }\n        },\n        error: function(data)\n        {\n          notification_show(settings.notification.invalid_class, \n                            settings.notification.message.error);\n        }\n      });\n\n    }\n\n    var notification_show = function(type, message)\n    {\n\n      $.each(items, function(i)\n      {\n        $(this).addClass(settings.input_invalid_class);\n      });\n      /* Make sure there is an item to wrap the message */\n      if (0 === $('#' + this_plugin[0].id + ' .' + settings.notification.wrapper.class).length) {\n        item = $('<div/>');\n        item.addClass(settings.notification.wrapper.class)\n            .addClass(settings.notification.effect)\n            .prependTo(this_plugin);\n      } else {\n        item = $('#' + this_plugin[0].id + ' .' + settings.notification.wrapper.class);\n      }\n\n      //* Blink if it's already there\n      if (item.is(':visible')) {\n        item.removeClass('success warning error information')\n            .addClass(type)\n            .html(message)\n            .fadeTo('fast', 0.5)\n            .fadeTo('slow', 1.0);\n      } else {\n        item.addClass(type).html(message)[settings.notification.show_effect]();\n        item.on('click', function(e)\n        {\n          notification_hide();\n        });\n        if (!$.isNumeric(settings.notification.auto_hide)) {\n          auto_hide = setTimeout(function() \n        {\n          notification_hide();\n          }, settings.notification.auto_hide);\n        }\n      }\n\n    }\n\n\n    var notification_hide = function()\n    {\n\n      $('#' + this_plugin[0].id + ' .' + settings.notification.wrapper.class)[settings.notification.hide_effect]('fast');\n        clearTimeout(auto_hide);\n\n    }\n\n    var custom_validation = {\n\n      text: function(item) {\n        item_value = $(item).val();\n        attr_maxlength = $(item).attr('maxLength') || null;\n        //pattern minlength maxlength\n        return /\\w+/.test(item_value);  \n      },\n      email: function(item) {\n        item_value = $(item).val();\n        return /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/.test(item_value);\n      },\n      textarea: function(item) {\n        item_value = $(item).val();\n        return /\\w+/.test(item_value);\n      },\n      selectone: function(item) {\n        return false;\n      },\n      file: function(item) {\n        //acept, multiple\n        return false;\n      },\n      checkbox: function(item) {\n        return $(item).is(':checked')\n      },\n      radio: function(item) {\n        return $(item).is(':checked');\n      },\n      password: function() {\n        \n        item_value = $(item).val();\n        return false;\n      }\n\n    };\n\n\n    //* Plugin's public functions\n    /* Expose functions by attaching them to 'this'\n     * or in this case 'this_plugin' former defined */\n    this_plugin.notification_show = function(type, message)\n    {\n\n      notification_show(type, message);\n\n    }\n\n    this_plugin.notification_hide = function()\n    {\n\n      notification_hide();\n\n    }\n\n\n\n    //* Plugin's initialization\n    return init();\n\n  }\n\n})(jQuery);\n","/* jshint ignore:start */\n(function() {\n  var WebSocket = window.WebSocket || window.MozWebSocket;\n  var br = window.brunch = (window.brunch || {});\n  var ar = br['auto-reload'] = (br['auto-reload'] || {});\n  if (!WebSocket || ar.disabled) return;\n  if (window._ar) return;\n  window._ar = true;\n\n  var cacheBuster = function(url){\n    var date = Math.round(Date.now() / 1000).toString();\n    url = url.replace(/(\\&|\\\\?)cacheBuster=\\d*/, '');\n    return url + (url.indexOf('?') >= 0 ? '&' : '?') +'cacheBuster=' + date;\n  };\n\n  var browser = navigator.userAgent.toLowerCase();\n  var forceRepaint = ar.forceRepaint || browser.indexOf('chrome') > -1;\n\n  var reloaders = {\n    page: function(){\n      window.location.reload(true);\n    },\n\n    stylesheet: function(){\n      [].slice\n        .call(document.querySelectorAll('link[rel=stylesheet]'))\n        .filter(function(link) {\n          var val = link.getAttribute('data-autoreload');\n          return link.href && val != 'false';\n        })\n        .forEach(function(link) {\n          link.href = cacheBuster(link.href);\n        });\n\n      // Hack to force page repaint after 25ms.\n      if (forceRepaint) setTimeout(function() { document.body.offsetHeight; }, 25);\n    },\n\n    javascript: function(){\n      var scripts = [].slice.call(document.querySelectorAll('script'));\n      var textScripts = scripts.map(function(script) { return script.text }).filter(function(text) { return text.length > 0 });\n      var srcScripts = scripts.filter(function(script) { return script.src });\n\n      var loaded = 0;\n      var all = srcScripts.length;\n      var onLoad = function() {\n        loaded = loaded + 1;\n        if (loaded === all) {\n          textScripts.forEach(function(script) { eval(script); });\n        }\n      }\n\n      srcScripts\n        .forEach(function(script) {\n          var src = script.src;\n          script.remove();\n          var newScript = document.createElement('script');\n          newScript.src = cacheBuster(src);\n          newScript.async = true;\n          newScript.onload = onLoad;\n          document.head.appendChild(newScript);\n        });\n    }\n  };\n\n  var port = ar.port || 9485;\n  var host = ar.host || br.server || window.location.hostname || 'localhost';\n\n  var connect = function(){\n    var protocol = window.location.protocol == 'https:' ? 'wss://' : 'ws://';\n    var connection = new WebSocket(protocol + host + ':' + port);\n    connection.onmessage = function(event) {\n      var message = event.data;\n      var reloader = reloaders[message] || reloaders.page;\n      reloader();\n    };\n    connection.onerror = function(){\n      if (connection.readyState) connection.close();\n    };\n    connection.onclose = function(){\n      window.setTimeout(connect, 1000);\n    };\n  };\n  if(ar.disabled == undefined || !ar.disabled){\n    connect();\n  }\n})();\n/* jshint ignore:end */"]}